/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dsltimeloggingsystem;

import dsltimeloggingsystem.User;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author L R E
 */
public class Signature extends javax.swing.JFrame {

    /**
     * Creates new form Signature
     */
    private static JFrame window = new JFrame("E-Sign");
    private static User sessionUser = null;
    private static boolean isDrawn = false;
    private static String dateStart = null;
    private static String dateEnd = null;
    private static ArrayList<String> employeePages = new ArrayList<String>();
    private final static JPanel panel = new JPanel();
    public Signature(User user, ArrayList<String> employeePages, String dateStart, String dateEnd) {
        initComponents();
        this.sessionUser = user;
        this.employeePages = employeePages;
        this.dateStart = dateStart;
        this.dateEnd = dateEnd;
        Signature.SimplePaintPanel content = new Signature.SimplePaintPanel();
        window.setContentPane(content);
        window.setSize(600,480);
        window.setLocation(100,100);
        window.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        window.setVisible(true);
        
    }
    public void init() {
      setContentPane( new Signature.SimplePaintPanel() );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(284, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static class SimplePaintPanel extends JPanel
               implements MouseListener, MouseMotionListener {

      private final static int BLACK = 0;
      
      private int currentColor = BLACK;
      private int prevX, prevY;
      private boolean dragging;
      private Graphics graphicsForDrawing;  
      
      SimplePaintPanel() {
         setBackground(Color.WHITE);
         addMouseListener(this);
         addMouseMotionListener(this);
         JButton saveButton = new JButton("Save");
            saveButton.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        if(isDrawn == true){
                            try {
                                window.setVisible(false);
                                JOptionPane.showMessageDialog(panel, "Successfully claimed salary", "Success", JOptionPane.INFORMATION_MESSAGE);
                                EmployeeList list = new EmployeeList(sessionUser, employeePages, dateStart, dateEnd);
                                list.setTitle("DSL Time Logging | List of Emoloyees");
                                list.pack();
                                list.setLocationRelativeTo(null);
                                list.setDefaultCloseOperation(0);
                                list.setVisible(true);
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(panel, "No image drawn yet", "Error", JOptionPane.INFORMATION_MESSAGE);
                        }

                    }
            });
         this.add(saveButton);
      }

      public void paintComponent(Graphics g) {
         
         super.paintComponent(g);  // Fill with background color (white).

         g.setColor(Color.WHITE);
         
      } // end paintComponent()

      private void setUpDrawingGraphics() {
         graphicsForDrawing = getGraphics();
         switch (currentColor) {
         case BLACK:
            graphicsForDrawing.setColor(Color.BLACK);
            break;
         }
      }

      public void mousePressed(MouseEvent evt) {
         
         int x = evt.getX();
         int y = evt.getY(); 
         
         int width = getWidth(); 
         int height = getHeight(); 
         
         if (dragging == true) 
            return;     
         
         else if (x > 3 && x < width - 56 && y > 3 && y < height - 3) {
            prevX = x;
            prevY = y;
            dragging = true;
            setUpDrawingGraphics();
         }
         
      } // end mousePressed()

      public void mouseReleased(MouseEvent evt) {
         if (dragging == false)
            return;  // Nothing to do because the user isn't drawing.
         dragging = false;
         graphicsForDrawing.dispose();
         graphicsForDrawing = null;
      }

      public void mouseDragged(MouseEvent evt) { 
        if (dragging == false)
            return;  // Nothing to do because the user isn't drawing.
         
        int x = evt.getX(); 
        int y = evt.getY();  
         
        if (x < 3)                        
            x = 3;                         
        if (x > getWidth() - 57)      
            x = getWidth() - 57;
         
        if (y < 3)                          
            y = 3;                          
        if (y > getHeight() - 4)       
            y = getHeight() - 4;
         
        graphicsForDrawing.drawLine(prevX, prevY, x, y);  // Draw the line.
         
        prevX = x;  
        prevY = y;
        isDrawn = true;
      } // end mouseDragged()
      
      
      public void mouseEntered(MouseEvent evt) { }
      public void mouseExited(MouseEvent evt) { }  
      public void mouseClicked(MouseEvent evt) { }  
      public void mouseMoved(MouseEvent evt) { }  
      
      
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
